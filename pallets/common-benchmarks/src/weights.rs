// Copyright 2019-2021 PureStake Inc.
// This file is part of Moonbeam.

// Moonbeam is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Moonbeam is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Moonbeam.  If not, see <http://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_common_benchmarks
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-08-21, STEPS: `[32, ]`, REPEAT: 64, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/moonbeam
// benchmark
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_common_benchmarks
// --extrinsic
// *
// --steps
// 32
// --repeat
// 64
// --raw
// --template=./benchmarking/frame-weight-template.hbs
// --output
// /tmp/

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{
	traits::Get,
	weights::{constants::RocksDbWeight, Weight},
};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_common_benchmarks.
pub trait WeightInfo {
	fn get_u64_value() -> Weight;
	fn put_u64_value() -> Weight;
	fn get_put_u64_value() -> Weight;
	fn emit_u64_value_event() -> Weight;
	fn get_emit_u64_value_event() -> Weight;
	fn get_u64_option() -> Weight;
	fn put_u64_option() -> Weight;
	fn get_put_u64_option() -> Weight;
	fn emit_u64_option_event() -> Weight;
	fn get_emit_u64_option_event() -> Weight;
	fn get_u64_map_value() -> Weight;
	fn put_u64_map_value() -> Weight;
	fn get_put_u64_map_value() -> Weight;
	fn get_u64_double_map_value() -> Weight;
	fn put_u64_double_map_value() -> Weight;
	fn get_put_u64_double_map_value() -> Weight;
}

/// Weights for pallet_common_benchmarks using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn get_u64_value() -> Weight {
		(3_187_000 as Weight).saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn put_u64_value() -> Weight {
		(2_268_000 as Weight).saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn get_put_u64_value() -> Weight {
		(4_430_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn emit_u64_value_event() -> Weight {
		(13_533_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn get_emit_u64_value_event() -> Weight {
		(15_351_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn get_u64_option() -> Weight {
		(3_238_000 as Weight).saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn put_u64_option() -> Weight {
		(2_266_000 as Weight).saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn get_put_u64_option() -> Weight {
		(4_465_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn emit_u64_option_event() -> Weight {
		(13_434_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn get_emit_u64_option_event() -> Weight {
		(14_981_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn get_u64_map_value() -> Weight {
		(3_971_000 as Weight).saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn put_u64_map_value() -> Weight {
		(3_127_000 as Weight).saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn get_put_u64_map_value() -> Weight {
		(6_075_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn get_u64_double_map_value() -> Weight {
		(4_488_000 as Weight).saturating_add(T::DbWeight::get().reads(1 as Weight))
	}
	fn put_u64_double_map_value() -> Weight {
		(3_567_000 as Weight).saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	fn get_put_u64_double_map_value() -> Weight {
		(6_958_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	fn get_u64_value() -> Weight {
		(3_187_000 as Weight).saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn put_u64_value() -> Weight {
		(2_268_000 as Weight).saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn get_put_u64_value() -> Weight {
		(4_430_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn emit_u64_value_event() -> Weight {
		(13_533_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn get_emit_u64_value_event() -> Weight {
		(15_351_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn get_u64_option() -> Weight {
		(3_238_000 as Weight).saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn put_u64_option() -> Weight {
		(2_266_000 as Weight).saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn get_put_u64_option() -> Weight {
		(4_465_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn emit_u64_option_event() -> Weight {
		(13_434_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn get_emit_u64_option_event() -> Weight {
		(14_981_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn get_u64_map_value() -> Weight {
		(3_971_000 as Weight).saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn put_u64_map_value() -> Weight {
		(3_127_000 as Weight).saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn get_put_u64_map_value() -> Weight {
		(6_075_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn get_u64_double_map_value() -> Weight {
		(4_488_000 as Weight).saturating_add(RocksDbWeight::get().reads(1 as Weight))
	}
	fn put_u64_double_map_value() -> Weight {
		(3_567_000 as Weight).saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	fn get_put_u64_double_map_value() -> Weight {
		(6_958_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
